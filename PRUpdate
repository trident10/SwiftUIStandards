### ✅ Refactor + Inject Payment Details & Review Coordinators with Provider Support

#### 🧩 Overview

This PR refactors the `PayAnyonePaymentDetailsCoordinator` and `PayAnyonePaymentReviewCoordinator` setup to support dependency injection using providers. This enables comprehensive unit testing and future-proofs the codebase with modular, protocol-driven architecture.

---

#### 🧱 Key Additions

##### 🔧 Coordinator Injection Enhancements

* Introduced:

  * `PayAnyonePaymentDetailsHostingControllerProviding`
  * `PayAnyonePaymentReviewCoordinatorProviding`
* Added `make()` methods to create instances cleanly and support mocks.

##### 🧪 Mock & Testing Support

* Added `MockPayAnyonePaymentReviewCoordinator` with:

  * `startInputModel`
  * `showPaymentReceipt` call tracking
  * Fraud session check simulation
* Updated:

  * `MockPayAnyonePaymentDetailsCoordinator` to track calls to `showPaymentReview`
  * `FixedDateProvider` to simulate time-sensitive logic deterministically
* Stubs added for:

  * `PayAnyonePaymentDetailsData.Output`
  * `PayAnyonePaymentReviewInputModel`

##### ✂️ Removed

* Redundant test code that directly initialized concrete coordinators inside `PayAnyonePaymentReviewViewModelTests`
* Inlined test-specific coordinators were moved to dedicated mocks or testable classes

---

#### 📄 Files Modified or Added

* ✅ Providers:

  * `PayAnyonePaymentDetailsHostingControllerProvider.swift`
  * `PayAnyonePaymentReviewCoordinatorProvider.swift`
* ✅ Mocks:

  * `MockPayAnyonePaymentReviewCoordinator.swift`
  * `MockHostingViewControllerProvider.swift`
* ✅ Stubs:

  * `.stub` for `Output`, `.mock` for `InputModel`
  * `FixedDateProvider` for consistent date injection in tests
* ✅ Tests:

  * Updated `PayAnyonePaymentDetailsCoordinatorTests`
  * Updated `PayAnyonePaymentDetailsViewModelTests`
  * Updated `PayAnyonePaymentReviewViewModelTests`

---

#### 🎯 Impact

* 🧪 Enables testing coordinator behavior in isolation
* ♻️ Reduces tight coupling and enhances extensibility
* 🔍 Makes fraud session tracking logic testable
* 🧼 Replaces hardcoded or untestable initializations with clean DI patterns
